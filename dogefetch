#!/usr/bin/env python3

# Delwink Software
# dogefetch
#
# This script is free software, released under the terms of the MIT license.
# See LICENSE for more information.
#
# This release of dogefetch is maintained by Delwink Software.
#
# Feature requests: sales@delwink.com
# Links to PGP keys available at http://delwink.com/contact.html
#
# Donate to Delwink!
# BTC  - 1AQvSMdEizXkYggWZU8pfEouuqMboJgqZa
# LTC  - LYzCqLD5nrf1hnRe5uKpeThDDXd3B3TawC
# DOGE - DSiVFYZmMCykf5ALqBNwiah8h1zKqT4sZo

##### ORIGINAL DEVELOPER COMMENTS #####

# Wow such python
# Feel free to modify
# So generous: DGSWzqyofHC6YDSA34hwVQpWGQHnzJm1sk
#
# Remember to make this file executable ( "$chmod +x ./dogefetch" )
#
# To add other coins, use the template below, and modify the coinget
# function accordingly.
#
###########################################################
#
# def <function name>():
#   url = '<http://data.bter.com/api/1/ticker/*>'
#   r = requests.get(url)
#   out = r.json()['avg']
#   return out
#
#############################################################

##### END ORIGINAL DEVELOPER COMMENTS #####

import requests, sys

def print_usage():
    """
    Print program usage
    """
    print ("USAGE: " + sys.argv[0] + " <coin>")
    print ("Valid coins:")
    print ("All - \"all\"")
    print ("Dogecoin - \"wow\"")
    print ("Litecoin - \"l\"")
    print ("Bitcoin - \"b\"")

def doge_usd():
    """
    Fetch USD - DOGE
    """
    url = 'http://data.bter.com/api/1/ticker/doge_usd'
    r = requests.get(url)
    out = r.json()['avg']
    if float (out) == 0.0:
        url = 'http://data.bter.com/api/1/ticker/doge_btc'
        r = requests.get(url)
        out = float (r.json()['avg'])
        out *= btc_usd()
    return out
    
def btc_usd():
    """
    Fetch USD - BTC
    """
    url = 'http://data.bter.com/api/1/ticker/btc_usd'
    r = requests.get(url)
    out = r.json()['avg']
    return out

def ltc_usd():
    """
    Fetch LTC - USD
    """
    url = 'http://data.bter.com/api/1/ticker/ltc_usd'
    r = requests.get(url)
    out = (r.json()['avg'])
    if float (out) == 0.0:
        url = 'http://data.bter.com/api/1/ticker/ltc_btc'
        r = requests.get(url)
        out = float (r.json()['avg'])
        out *= btc_usd()
    return out

def coinget(coin):
    """
    l   -   ltc
    b   -   btc
    wow -   doge
    all -   all
    """
    if coin == "l":
        print ("$"+str(ltc_usd()))
    elif coin == "lwow" or coin == "wowl":
        print ("LTC: $"+str(ltc_usd())+" DOGE: $"+str(doge_usd()))
    elif coin == "lb" or coin == "bl":
        print ("BTC: $"+str(btc_usd())+" LTC: $"+str(ltc_usd()))
    elif coin == "b":
        print ('$'+str(btc_usd()))
    elif coin == "bwow" or coin == "wowb":
        print ("BTC: $"+str(btc_usd())+" DOGE: $"+str(doge_usd()))
    elif coin == "wow":
        print ('$'+str(doge_usd()))
    elif coin == "all":
        print ("BTC: $"+str(btc_usd())+" LTC: $"+str(ltc_usd())+" DOGE: $"+str(doge_usd()))
    else:
        print_usage()
        exit(2)

try:
    coinget(sys.argv[1])
except IndexError:
    print_usage()
    exit(1)
